
package org.maishameds.programmingchallenge;
import android.content.Context;
import android.content.Intent;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import com.couchbase.lite.Document;
import java.util.IllegalFormatException;
import java.util.List;
import java.util.Map;


/**
 * Created by android on 7/15/2017.
 */

public class DataAdapter extends RecyclerView.Adapter<DataAdapter.MyViewHolder> {

    private List<Document> supplyItemList;
    Context mContext;
    private static final String LOG_TAG = DataAdapter.class.getSimpleName();
    private String name;
    private String brand;
    private Number price;
    private String unitType;
    private String SUPPLY_ITEM = "SupplyItem";

    public class MyViewHolder extends RecyclerView.ViewHolder   {
        public TextView name, brand, price, quantity_unit_type;
        public View mView;

        public MyViewHolder(View view) {
            super(view);
            mView = view;
            name = (TextView) itemView.findViewById(R.id.name);
            brand = (TextView) itemView.findViewById(R.id.brand);
            price = (TextView) itemView.findViewById(R.id.quantity_unit_type);
            quantity_unit_type = (TextView) itemView.findViewById(R.id.price);

        }


    }


    public DataAdapter(List<Document> supplyItemList) {
        this.supplyItemList = supplyItemList;

        Log.v( LOG_TAG +"SupplyitemList", String.valueOf(supplyItemList.size()));
    }

    @Override
    public DataAdapter.MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View itemView = LayoutInflater.from(parent.getContext())
                .inflate(R.layout.supply_item_row_layout, parent, false);
        mContext = parent.getContext();


        return new MyViewHolder(itemView);
    }

    @Override
    public void onBindViewHolder(MyViewHolder holder, final int position) {

        final  Map<String, Object> supplyItemProperties = supplyItemList.get(position).getProperties();

        try {

            price = (Number) supplyItemProperties.get("price");
            name = (String) supplyItemProperties.get("name");
            brand = (String) supplyItemProperties.get("brand");
            unitType = (String) supplyItemProperties.get("unit_type");
        }
        catch(NullPointerException e){

            Log.v("NullPointerException",String.valueOf(e));
        }

        Log.v("price", String.valueOf(price));



        try {
            holder.price.setText(String.valueOf(price));
        }
        catch(IllegalFormatException e) {
            Log.v("IllegalFormatException",String.valueOf(e));
        }


        if(!StringUtils.isEmptyString(name)){
            holder.name.setText(name);
        }


        if(!StringUtils.isEmptyString(brand)){
            holder.brand.setText(brand);
        }

        if(!StringUtils.isEmptyString(unitType)){
            holder.quantity_unit_type.setText(unitType);
        }


        holder.mView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v ) {

                Intent intent = new Intent(mContext, EditActivity.class);

                try {

                    intent.putExtra(SUPPLY_ITEM, new SupplyItem(supplyItemList.get(position)));
                }

                catch(IllegalFormatException e){

                    Log.v("IllegalFormatException",String.valueOf(e));
                }

                mContext.startActivity(intent);
            }
        });
    }



    @Override
    public int getItemCount() {
        Log.v("SupplyitemListCount", String.valueOf(supplyItemList.size()));
        return supplyItemList.size();

    }

    public static class StringUtils {

        /**
         * check if is empty utility function
         *
         * @param text
         * @return
         */
        public static boolean isEmptyString(String text) {
            boolean isEmpty = false;
            try {
                isEmpty = (text == null || text.trim().equals("null") || text.trim().equals(""));
            } catch (Exception ex) {
                isEmpty = false;
            }
            return isEmpty;
        }
    }

}

