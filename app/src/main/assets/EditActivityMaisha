package org.maishameds.programmingchallenge;

import android.content.Intent;
import android.content.res.Resources;
import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.Snackbar;
import android.support.design.widget.TextInputEditText;
import android.support.design.widget.TextInputLayout;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.KeyEvent;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;

import com.couchbase.lite.CouchbaseLiteException;
import com.couchbase.lite.Database;
import com.couchbase.lite.Document;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;

public class EditActivity extends AppCompatActivity {

    private EditText name, brand, price, unitType;
    private Button btn_edit;
    private TextInputLayout editNameTextInputLayout, brandTextInputLayout, priceTextInputLayout, unitTypeTextInputLayout;
    private static final String LOG_TAG = EditActivity.class.getSimpleName();
    SupplyItem editSupplyItem =  new SupplyItem();
    private Toolbar mToolbar;
    private String SUPPLY_ITEM = "SupplyItem";


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_edit);
        mToolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(mToolbar);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        getSupportActionBar().setDisplayShowHomeEnabled(true);

        initializeViews();


    }


    public boolean onOptionsItemSelected(MenuItem menuItem) {
        switch (menuItem.getItemId()) {
            case android.R.id.home:
                Intent intent = new Intent(this, MainActivity.class);
                this.startActivity(intent);
                return true;

        }
        return (super.onOptionsItemSelected(menuItem));
    }


    /**
     * Fetch data from bundle and display on editActivity
     */
    private void initializeViews() {

        SupplyItem getEditInfo = getIntent().getParcelableExtra(SUPPLY_ITEM);

         getEditInfo = getSupplyItemFromDocument((Document) getIntent().getParcelableExtra(SUPPLY_ITEM));



        name = (EditText) findViewById(R.id.et_name);
        brand = (EditText) findViewById(R.id.et_brand);
        price = (EditText) findViewById(R.id.et_price);
        unitType = (EditText) findViewById(R.id.et_unitType);
        btn_edit = (Button) findViewById(R.id.btn_edit);


        editNameTextInputLayout = (TextInputLayout) findViewById(R.id.et_name_textInput_Layout);
        brandTextInputLayout = (TextInputLayout) findViewById(R.id.et_brand_text_input_layout);
        priceTextInputLayout = (TextInputLayout) findViewById(R.id.price_text_input_layout);
        unitTypeTextInputLayout = (TextInputLayout) findViewById(R.id.unit_type_text_input_layout);


        name.setText(getEditInfo.getName());
        brand.setText(getEditInfo.getBrand());
        price.setText(getEditInfo.getPrice().toString());
        unitType.setText(getEditInfo.getUnitType());




        btn_edit.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                validateFields();

                editSupplyItem.setName(String.valueOf(name.getText()));
                editSupplyItem.setBrand(String.valueOf(brand.getText()));
                editSupplyItem.setPrice((BigDecimal) price.getText());
                editSupplyItem.setUnitType(String.valueOf(unitType.getText()));


                DatabaseUtils.save(editSupplyItem,getApplicationContext());

                btn_edit.setEnabled(false);

            }});

    }


    /**
     * Clears data on back pressed
     */
    @Override
    public void onBackPressed() {

        moveTaskToBack(false);
        name.setText("");
        brand.setText("");
        price.setText("");
        unitType.setText("");

    }


    /**
     * Ensures all fields are filled before saving
     */
    private void validateFields() {


        editNameTextInputLayout.setErrorEnabled(true);
        brandTextInputLayout.setErrorEnabled(true);
        priceTextInputLayout.setErrorEnabled(true);
        unitTypeTextInputLayout.setErrorEnabled(true);


        if (StringUtils.isEmptyString(name.getText().toString())) {
            editNameTextInputLayout.setError(getApplicationContext().getResources().getString(R.string.name_Erorr));
        }
        if (StringUtils.isEmptyString(brand.getText().toString())) {
            brandTextInputLayout.setError(getApplicationContext().getResources().getString(R.string.brand_Erorr));
        }
        if (StringUtils.isEmptyString(price.getText().toString())) {
            priceTextInputLayout.setError(getApplicationContext().getResources().getString(R.string.price_Erorr));
        }
        if(StringUtils.isEmptyString(unitType.getText().toString())) {
            unitTypeTextInputLayout.setError(getApplicationContext().getResources().getString(R.string.unitType_Erorr));
        }

    }

    /**
     *     Overides the Home Button
     *
     * @param keyCode
     * @param event
     * @return
     */
    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if ((keyCode == KeyEvent.KEYCODE_HOME)) {
            name.setText("" );
            brand.setText("" );
            price.setText("");
            unitType.setText("");
        }
        return true;
    }


    public static class StringUtils {

        /**
         * check if is empty utility function
         *
         * @param text
         * @return
         */
        public static boolean isEmptyString(String text) {
            boolean isEmpty = false;
            try {
                isEmpty = (text == null || text.trim().equals("null") || text.trim().equals(""));
            } catch (Exception ex) {
                isEmpty = false;
            }
            return isEmpty;
        }
    }

    private SupplyItem getSupplyItemFromDocument(Document document) {

        return new SupplyItem(document);
    }

}
